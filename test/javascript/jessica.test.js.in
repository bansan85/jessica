const jessica =
  require('${CMAKE_BINARY_DIR}/src/javascript/wasm/jessica-node.js');

jest.spyOn(console, 'log');

test('WarmUpJessica', async () => {
  return jessica().then(async () => {
  });
});

test('VerticalEccentric', async () => {
  return jessica().then(async (instance) => {
    const vert1 = new instance.VerticalEccentric();
    expect(vert1.getE()).toBeNaN();
    expect(vert1.getV()).toBeNaN();
    const vert2 = vert1.setE(0.2);
    expect(vert2.getE()).toBe(0.2);
    expect(vert2.getV()).toBeNaN();
    const vert3 = vert2.setV(100);
    expect(vert3.getE()).toBe(0.2);
    expect(vert3.getV()).toBe(100);
    const vert4 = vert3.clone();
    expect(vert4.getE()).toBe(vert3.getE());
    expect(vert4.getV()).toBe(vert3.getV());
  });
});

test('FoundationStrip', async () => {
  return jessica().then(async (instance) => {
    const foundation = new instance.FoundationStrip();
    expect(foundation.getB()).toBeNaN();
    const foundation2 = foundation.setB(1.0);
    expect(foundation2.getB()).toBe(1.0);
    const foundation3 = foundation2.clone();
    expect(foundation3.getB()).toBe(foundation2.getB());
  });
});

test('CalcMeyehof', async () => {
  return jessica().then(async (instance) => {
    const logger = new instance.SpdlogStdoutMt('log');
    const foundation4 = new instance.FoundationStrip().setB(1.0);
    const vert5 = new instance.VerticalEccentric().setV(100000).setE(0.25);

    const calc = new instance.MeyerhofShallowFoundation(
        logger, logger, vert5, foundation4);
    expect(calc.qref()).toBe(200000);
    expect(calc.b_()).toBe(0.5);
  });
});
